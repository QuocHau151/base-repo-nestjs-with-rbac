generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid()) @db.Uuid
  email    String  @unique
  name     String  @db.VarChar(500)
  password String  @db.VarChar(500)
  phone    String  @db.VarChar(50)
  avatar   String? @db.VarChar(1000)

  // Này có thể dùng để thực hiện chức năng quên mật khẩu, đăng nhập 2 bước
  totpSecret         String?        @unique @db.VarChar(1000)
  status             UserStatus     @default(INACTIVE)
  roleId             String         @db.Uuid
  role               Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  devices            Device[] // Liên kết 1-n với Device
  refreshTokens      RefreshToken[]
  createdPermissions Permission[]   @relation("PermissionCreatedBy")
  updatedPermissions Permission[]   @relation("PermissionUpdatedBy")
  deletedPermissions Permission[]   @relation("PermissionDeletedBy")
  createdRoles       Role[]         @relation("RoleCreatedBy")
  updatedRoles       Role[]         @relation("RoleUpdatedBy")
  deletedRoles       Role[]         @relation("RoleDeletedBy")

  createdUserTranslations UserTranslation[] @relation("UserTranslationCreatedBy")
  updatedUserTranslations UserTranslation[] @relation("UserTranslationUpdatedBy")
  deletedUserTranslations UserTranslation[] @relation("UserTranslationDeletedBy")
  userTranslations        UserTranslation[] @relation("User")
  sentMessages            Message[]         @relation("FromUser")
  receivedMessages        Message[]         @relation("ToUser")

  createdById  String? @db.Uuid
  createdBy    User?   @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[]  @relation("CreatorUsers")

  updatedById  String? @db.Uuid
  updatedBy    User?   @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[]  @relation("UpdatorUsers")
  deletedById  String? @db.Uuid
  deletedBy    User?   @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[]  @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model UserTranslation {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  user        User    @relation("User", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languageId  String
  address     String? @db.VarChar(500)
  description String?

  createdById String? @db.Uuid
  createdBy   User?   @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById String? @db.Uuid
  updatedBy   User?   @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById String? @db.Uuid
  deletedBy   User?   @relation("UserTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model VerificationCode {
  id    String               @id @default(uuid()) @db.Uuid
  email String               @unique @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model Device {
  id            String         @id @default(uuid()) @db.Uuid
  userId        String         @db.Uuid
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  refreshTokens RefreshToken[] // Liên kết 1-n với RefreshToken
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deviceId  String   @db.Uuid // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Permission {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  roles       Role[]
  module      String     @default("") @db.VarChar(500)
  createdById String?    @db.Uuid
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById String?    @db.Uuid
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById String?    @db.Uuid
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById String? @db.Uuid
  createdBy   User?   @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById String? @db.Uuid
  updatedBy   User?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById String? @db.Uuid
  deletedBy   User?   @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Message {
  id         String @id @default(uuid()) @db.Uuid
  fromUserId String @db.Uuid
  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   String @db.Uuid
  toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}
